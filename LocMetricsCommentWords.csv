Word,Count
*,1782
,828
@ref,602
the,586
to,345
of,334
is,320
@brief,267
in,232
:,230
and,222
/<,194
Socket,178
@ingroup,177
for,164
@param,162
register,161
be,160
It,148
-,148
=,136
address,124
@details,122
data,122
number,118
socket,113
\n,108
or,108
mode,105
function,105
as,96
a,93
should,93
IP,89
@sa,87
with,85
set,83
from,80
Get,78
this,76
n,72
+,70
by,69
OR,69
DHCP,69
not,68
bit,68
packet,67
This,65
~,65
Value,65
<<,64
OF,64
value,61
@return,59
Set,58
size,57
buffer,56
<tr>,55
The,53
<b>0,53
it,53
@b,53
//,52
1,52
when,51
only,50
uint8_t,50
received,48
<td>,47
In,47
TCP,45
W5500,45
If,45
7</b>,44
message,44
(uint8_t)sn,44
WIZCHIP,43
Socket_register_access_function,43
UDP,42
used,42
on,42
For,42
configures,42
interrupt,41
Common_register_access_function,41
#define,41
\ref,41
port,40
THE,40
status,40
use,39
&,38
Interrupt,38
are,38
8),38
Send,38
</tr>,37
bytes,37
0,37
return,37
type,36
command,36
When,36
state,35
can,34
SOCKET,34
interface,33
AND,33
Pointer,33
operation,33
Invalid,33
will,32
indicates,32
ANY,32
uint16_t,32
you,32
timer,31
read,31
server,31
time,31
Valid,31
\mode,\,30
length,30
check,30
</td>,30
MAC,29
following,29
write,29
<,28
@note,28
byte,28
functions,28
M20150401,28
if,27
send,27
W5300,27
No,26
connection,26
source,26
Socket_register_group,26
destination,26
2,26
without,25
PHY,25
Common_register_group,25
SPI,25
after,24
RX,24
conditions,24
timeout,24
IN,24
TX,24
request,23
variable,23
PPPoE,22
(_W5500_IO_BASE_,22
3)),22
must,22
allocated,22
==,21
peer,21
4,21
code,21
that,21
called,21
Type,20
using,20
len,20
Register,20
</td><td>,20
version,20
enable,20
callback,19
changed,19
block,19
A20150601,19
RIP_MSG,19
until,19
extra_functions,19
Enable,19
network,19
client,19
ip,19
provided,18
its,18
WIZnet,18
do,18
explict,18
valid,18
Reserved,18
occurred,18
<td>0</td>,18
wait,18
than,17
get,17
mask,17
<td>O</td>,17
above,17
Success,17
Sn_SR,17
\,17
memory,17
Network,17
load,17
call,17
so,16
an,16
default,16
binary,16
\notice,\,16
receive,16
machine,16
\LIABILITY,\,16
back,16
null,16
your,16
disclaimer,16
*****************************************************************************,16
\TO,\,16
copyright,16
FOR,16
IMPLIED,16
list,16
Redistributions,16
CONTRIBUTORS,16
sn,16
COPYRIGHT,16
LIMITED,16
THIS,16
M20150601,16
NOT,16
BUT,16
ID,16
declaration,15
describe,15
ARP,15
protocol,15
IR,15
IO,15
void,15
1;,15
such,15
clear,15
pointer,15
any,15
sent,15
values,15
process,14
Refer,14
<td>Reserved</td>,14
All,14
history,14
/,14
Sn_IR,14
SSN,14
other,14
access,14
Reset,14
chip,14
</td></tr>,14
Fail,14
io,14
{,14
zero,13
during,13
WIZnet_socket_APIs,13
Sn_MR,13
Define,13
then,13
packet),13
DATA_TYPE,13
(WIZCHIP_CREG_BLOCK,13
disable,13
(@ref,13
Buffer,13
written,13
MACRAW,13
integrating,13
all,13
information,13
name,13
internal,13
Data,13
SOCK_CLOSED,13
control,13
Only,12
GitHub,12
select,12
Mode,12
->,12
0;,12
_RTR_,12
update,12
},12
one,12
Mask,12
casting,12
unit,12
Select,12
clock,12
condition,12
Block,12
parameters,12
I/O,12
Default,12
<table>,11
ACK,11
initialized,11
max,11
wrong,11
SEND,11
A,11
SOCK_BUSY,11
configured,11
changes,11
assign,11
current,11
API,11
corresponding,11
</table>,11
issued,11
option,11
reset,11
-#,11
SIR,11
EEPROM,11
count,11
address(R/W),11
parameter,11
our,11
IF,11
because,11
delay,11
@defgroup,11
(,11
distribution,10
etc,10
returns,10
OPEN,10
),10
hardware,10
updated,10
These,10
help,10
3,10
SOCKERR_SOCKNUM,10
\interrupt,\,10
Release,10
*@param,10
register(R/W),10
_RCR_,10
loop,10
6,10
BE,10
refer,10
processing,10
many,10
Write,10
Disable,10
sensor,10
maximum,10
\functions,\,10
Sn_CR,10
Timeout,10
section,10
flag,10
APIs,10
specific,10
based,10
Destination,10
conflict,10
ignored,9
*<,9
Sn_IMR,9
Receive,9
passed,9
defined,9
on/off,9
starting,9
int,9
SOCKERR_SOCKMODE,9
into,9
initiate,9
\_WIZCHIP_SOCK_NUM_</b>,9
successfully,9
M20140501,9
OPT,9
point,9
(WIZCHIP_SREG_BLOCK(N),9
#if,9
retry,9
second,9
RMS,9
Each,9
setup,9
handler,9
before,9
buf,9
ADC,9
Closing,9
|,9
we,9
no,9
error,9
_IMR_,9
burst,9
completed,9
first,9
level,9
local,9
%x,9
may,9
nor,8
\INCLUDING,\,8
\CONTRACT,\,8
endorse,8
reserved,8
\(INCLUDING,\,8
derived,8
Basic_IO_function,8
Sn_TX_WR,8
\current_uptime_in_seconds,\,8
Red,8
STRICT,8
OTHERWISE),8
SOFTWARE,8
PARTICULAR,8
\modification,\,8
ADVISED,8
\Co.,\,8
products,8
configuration,8
MERCHANTABILITY,8
\DIRECT,\,8
<b>,8
sending,8
POSSIBILITY,8
prior,8
EXPRESS,8
\SOFTWARE,\,8
documentation,8
LIABLE,8
\INDIRECT,\,8
BY,8
Revision,8
1st,8
TORT,8
OUT,8
retain,8
supported,8
Blocking\n,8
\2013,\,8
OWNER,8
HOWEVER,8
new,8
\INCIDENTAL,\,8
unreachable,8
materials,8
DAMAGE,8
GOODS,8
global,8
NO,8
SOCK_ESTABLISHED,8
\"\AS\,8
ARE,8
Sn_TXBUF_SIZE,8
retransmission,8
Berkeley,8
PROVIDED,8
\author,8
SUBSTITUTE,8
reproduce,8
Link,8
<td>1</td>,8
FITNESS,8
Sn_RXBUF_SIZE,8
NEGLIGENCE,8
EVENT,8
INTERRUPTION),8
bytes),8
_WIZCHIP_IO_MODE_,8
Sn_DPORT,8
Read,8
CAUSED,8
software,8
SUCH,8
DISCLAIMED,8
Request,8
@todo,8
PHYCFGR,8
\DATA,\,8
_WIZCHIP_,8
ARISING,8
SHALL,8
MidnightCow,8
Copyright,8
You,8
LOSS,8
BUSINESS,8
EVEN,8
\WARRANTIES,\,8
SIMR,8
contributors,8
permitted,8
Redistribution,8
greater,8
CONSEQUENTIAL,8
Toggle,8
PROCUREMENT,8
form,8
WAY,8
\PORTSetBits(IOPORT_A,\,8
connected,8
critical,8
\EXEMPLARY,\,8
Green,8
have,8
rights,8
Ping,8
\version,8
Neither,8
promote,8
ON,8
PURPOSE,8
THEORY,8
\file,8
\date,8
(c),8
SERVICES;,8
\brief,8
names,8
\USE,\,8
HOLDERS,8
met:,8
<b>TCP,8
WHETHER,8
\forms,\,8
\SPECIAL,\,8
permission,8
\copyright,8
PROFITS;,8
(INCLUDING,8
carry,8
\par,8
\n\n,8
and/or,8
IS,8
LTD,8
receiving,8
<ORGANIZATION>,8
WARRANTIES,8
Sn_KPALVTR,8
\IS"\\,8
DAMAGES,8
USE,8
Sn_RX_RD,7
transmit,7
Rename,7
Close,7
func,7
Register(R/W),7
becomes,7
mode(P[3:0],7
input,7
connect-request,7
communication,7
period,7
Force,7
Sn_MR_MACRAW,7
Solid,7
has,7
\W5300,\,7
automatically,7
Registers,7
Explicit,7
host,7
SOCK_OK,7
100us,7
power,7
cleared,7
low,7
(SYN,7
arg,7
stop,7
After,7
Clear,7
Wait,7
Common,7
mode\n,7
PPP,7
DATA,7
define,7
which,7
>>,7
how,7
{};,7
module,7
listen,7
transmits,7
Address,7
Server,7
Used,6
temperature,6
visit,6
each,6
\register,\,6
To,6
https://github.com/Wiznet/ioLibrary_Driver,6
65535,6
occurs,6
\address,\,6
IGMP,6
repository,6
applied,6
Download,6
Sn_TTL,6
PMRU,6
response,6
-----------------------------,6
Message,6
acquired,6
directly,6
IPv6,6
2013/10/21,6
phy,6
Notice,6
bus,6
16,6
Control,6
Header,6
W5200,6
same,6
ICMP,6
Conflict,6
Error,6
<2015/02/05>,6
Please,6
like,6
start,6
Sn_FRAG,6
busy,6
WIZCHIP_IO_Functions,6
UPORTR,6
file,6
\_WIZCHIP_,6
Add,6
there,6
percentage,6
prescaler,6
Sn_DIPR,6
W5100,6
WOL,6
magic,6
latest,6
Call,6
<2013/10/21>,6
Sn_TOS,6
ioLibrary,6
Sn_MSSR,6
immediately,6
addr,6
basic,6
Port,6
open,6
transmitting,6
0),6
Magic,6
incoming,6
these,6
blocks,6
@,6
:\n,6
system,6
opened,6
increment,6
saved,6
\flag,\,6
Sample,6
case,5
WIZCHIP_register,5
\b,5
Gateway,5
Multicast,5
user,5
registers,5
Update,5
LED,5
Sn_MR_UDP,5
\_WIZCHIP_IO_MODE_SPI_,5
add,5
removed,5
\environment,\,5
DNS,5
Interrupt</b>,5
=>,5
Sn_MR(P[3:0]),5
gateway,5
INTLEVEL,5
per,5
Device,5
Information,5
\debugging,\,5
<I>len</I>,5
*@brief,5
Remove,5
duty_cycle,5
delay_us(10000);,5
#endif,5
legacy,5
wants,5
saving,5
transmitted,5
receives,5
doesn't,5
OC4RS,5
SOCKERR_TIMEOUT,5
configurations,5
NODE,5
M20150409,5
does,5
exceeds,5
Packet,5
BUS,5
compare,5
keep-alive,5
MESSAGE,5
reception,5
character,5
at,5
Not,5
group,5
off,5
exceed,5
(6,5
also,5
record,5
<td>3</td>,5
Received,5
CRC,5
command..,5
NACK,5
counter,5
according,5
<td>7</td>,5
turn,5
support,5
sample,5
output,5
every,5
||,5
Subnet,5
register(R),5
255,5
Sn_TX_RD,5
PTIMER,5
<td>5</td>,5
</b>,5
non-block,5
getsockopt,5
sends,5
field,5
1s,5
TCPTO,5
<b>in,5
<td>4</td>,5
PMAGIC,5
mac,5
OC3RS,5
\occurs,\,5
*@todo,5
subnet,5
!=,5
<td>2</td>,5
\data,\,5
<td>6</td>,5
OpenADC10,5
Describe,5
indicate,5
multicast,5
'1'),5
DECLINE,5
while,5
Check,5
\W5100,\,5
Transmit,5
returned,5
peer.\n,5
transfer,5
driver,5
change,5
*@note,5
disconnect-process,5
MAGIC_COOKIE,5
\%x\n"\,\,5
PSID,5
Sn_PORT,5
IEC0<9>,4
intr_kind,4
already,4
fatal,4
CONNECT,4
5100,4
indirect,4
0x8000;,4
socket(),4
_WIZCHIP_IO_MODE_BUS_INDIR_,4
type-cast,4
\details,4
complete,4
offset,4
\,\,4
1:,4
*buffer,4
leased,4
Delayed,4
WIZchip,4
passive-close.\n,4
Blocking,4
16bits,4
SOCKERR_DATALEN,4
CONFIG,4
******************************************************,4
sockopt_type,4
waits,4
SOCK_INIT,4
\PPPoE,\,4
(4,4
UART2,4
instead,4
Wake,4
Machine,4
%d,4
(duty_cycle,4
Initialize,4
Broadcast,4
<2014/05/01>,4
N,4
made,4
equal,4
\_WIZCHIP_IO_MODE_BUS_DIR_,4
BIT_2);,4
FIN,4
sever,4
accepts,4
successful,4
datagram,4
uptime,4
operated,4
normal,4
\packet,\,4
\null,\,4
On,4
warning,4
DHCP_run(),4
Current,4
PLL,4
sock_pack_info[sn],4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////,4
A20150401,4
OFF,4
Value:,4
lower,4
end,4
LCP,4
raw,4
down,4
analog,4
MAX,4
SSN_CONFIG,4
Interrupt\n,4
\Block,\,4
interval,4
IK_WOL,4
Copy,4
OS,4
***********************************,4
Normal,4
////////////////////,4
w5100,4
////////////////////////////////////////////////////////////////////////////////////////////,4
0x10000,4
space,4
Timer,4
Unicast,4
Sn_RX_RSR,4
/////////////////////////////////////,4
Size,4
since,4
setting,4
Sn_RX_WR,4
application,4
UIPR,4
64KB,4
ex>,4
\Sn_MR_MACRAW,\,4
checked,4
ptrdiff_t,4
else,4
been,4
calculation,4
close,4
Source,4
location,4
//////////////////////////,4
RECV,4
assigned,4
even,4
But,4
broadcasting,4
replace,4
flags,4
hostname,4
want,4
\_WIZCHIP_IO_MODE_BUS_INDIR_,4
previous,4
timestamp,4
\%d\n"\,\,4
VERSIONR,4
transmission,4
\WOL,\,4
100;,4
Multicasting,4
listening,4
SOCKETn,4
Configured,4
5,4
DISCOVER,4
Basic,4
>,4
Sn_TX_FSR,4
messages,4
sotype,4
brief,4
100,4
0:,4
AddrSel,4
5200,4
Option,4
cycle,4
copies,4
BIT_3);,4
M20131220,4
shown,4
Non-block,4
Typing,4
between,4
\current,\,4
Time,4
Casting,4
real,4
whenever,4
PIN,4
Sensor,4
Integrating,3
Configurations,3
Processing,3
INTn,3
_DHCP_DEBUG_,3
unreachable),3
reading,3
RCR,3
implemented,3
x00,3
Sn_IR[TIMEOUT],3
Eric,3
structure,3
WIZCHIP_WRITE_BUF(),3
connection-request,3
ctlwizchip(),3
States,3
shows,3
unexpectedly,3
closing.\n,3
normally,3
\4,\,3
configure,3
\WIZCHIP_READ_BUF(),\,3
ordered.\n,3
Sn_DHAR,3
Turn,3
Disconnect-process,3
\0xFFFF,\,3
V1.0.2,3
api,3
wiz_PhyConf,3
D20150601,3
connect,3
array,3
but,3
options,3
next,3
Resets,3
2016.10.28,3
OFFER,3
still,3
correct,3
*or,3
string,3
24LC08,3
just,3
inside:,3
@par,3
<code>,3
KA,3
Controls,3
errata),3
means,3
I2C1,3
(ARP,3
pin,3
remain,3
kind,3
about,3
sequence,3
Errata,3
1),3
8,3
uint32_t,3
Wrong,3
filled,3
wizchip_bus_writebyte,3
Tx,3
sensor-4,3
day,3
free,3
more,3
fields,3
PHAR,3
(PR3+1)*((float)duty_cycle/100);,3
duty_cycle++),3
reads,3
\occurs),\,3
corresponds,3
Output,3
ack,3
compile),3
SYMBOE,3
respectively,3
peripheral,3
-1,3
///<,3
MR,3
\Irms_currents[3],\,3
Listen,3
IFS0<9>,3
frequency,3
temporary,3
V1.0.1,3
#5,3
Peer,3
<i>len(variable)</i>,3
Gets,3
waiting,3
i,3
enough,3
implict,3
priority/subpriority,3
pnetinfo,3
SPI2,3
SOCK,3
high,3
SIPR,3
wiz_NetInfo,3
rated,3
determined,3
header,3
Modify,3
IFS0<4>,3
setsockopt(),3
\successfully,\,3
\W5200,\,3
SEND_MAC,3
SOCKERR_SOCKSTATUS,3
\#4,\,3
at:,3
ctlnetwork(),3
Stop,3
'sn',3
100KHz,3
DISCON,3
Status,3
1:1,3
Sn_MR_TCP,3
IEC0<4>,3
netinfo,3
ethernet,3
Max,3
(PR2+1)*((float)duty_cycle/100);,3
makeDHCPMSG(),3
width,3
main,3
\Irms_currents[0],\,3
SOCKERR_IPINVALID;,3
\printf("\<<timeout>>\,3
Initializes,3
sensor-2,3
peter,3
IR_UNREACH,3
len;,3
TCP/UDP,3
copy,3
LAYER,3
sockint_kind,3
being,3
\Timer2,\,3
Non-TCP,3
three,3
closed,3
ith,3
samples,3
///////////////////////////////////,3
active-close,3
'@ref,3
SO_PACKINFO,3
\completed,\,3
value</td></tr>,3
config,3
Fixed,3
****************************************************************************,3
them,3
initialization,3
File,3
phyconf,3
dummy,3
PACK_REMAINED,3
SOCK_MACRAW,3
setSn_MSSR(),3
RAW,3
\failed,\,3
applied),3
bigger,3
\int,\,3
REQUEST,3
type</td><td>@b,3
And,3
channel,3
deselect,3
Maximum,3
characters,3
\WIZCHIP_READ(),\,3
wizchip_spi_writebyte,3
recvfrom(),3
PWM,3
(When,3
Param,3
direct,3
Re-define,3
static,3
Do,3
asserted,3
humidity,3
Connection,3
increased,3
\Irms_currents[2],\,3
255;,3
always,3
sensor-3,3
sensor-1,3
over,3
ctlsock_type,3
\Irms_currents[1],\,3
two,3
ref,3
</code>,3
interrupts,3
Wiz5500,3
duration,3
\WIZCHIP_WRITE(),\,3
Even,2
\OFFER,\,2
clientconnection,2
Issued,2
nettime,2
disconnected,2
\0xAA,\,2
getSn_DIPR(),2
assignment,2
sampling,2
setSIPR(),2
(uint8_t*)dipr,2
setINTLEVEL(),2
please,2
Sn_CR_OPEN,2
multivectored,2
\2Kbytes,\,2
_WIZCHIP_IO_MODE_BUS_DIR_,2
\addr,\,2
Others,2
\time,\,2
wizNetInfo,2
SO_TOS,2
Need,2
<td>X</td>,2
Following,2
getSn_TxMAX(s)),2
@endcond,2
(\ref,2
ground,2
\However,\,2
Theses,2
follows,2
machines,2
seconds,2
_WIZCHIP,2
non-OS,2
Indclude,2
Sn_MR_MULTI,2
SHAR,2
\But,\,2
\configured,\,2
(uint8_t*)sipr,2
getsockopt(),2
wb),2
act,2
OC3,2
mode</b>,2
\temperature_bytes[0],\,2
\DISCOVER,\,2
\case,\,2
operate,2
Initiate,2
Sine,2
OC4,2
implement,2
Decide,2
executed,2
unicast,2
channels,2
was,2
setSn_IR(),2
dhcp.h,2
initially,2
zero\n,2
once,2
(greater,2
\0',\,2
10,2
whole,2
RA0,2
\SO_PACKINFO,\,2
op,2
RB0,2
Module,2
\sockint_kind,\,2
\API>"\\,2
<stdio.h>,2
\sa,2
confirms,2
*((uint32_t*)addr),2
self,2
different,2
DHCP_init(),2
flow,2
pBuf,2
getPMRU(),2
destination(0.0.0.1),2
Should,2
works,2
Result,2
spi_rb,2
///////////,2
M20160503,2
\SOCK_ESTABLISHED,\,2
(0x001B,2
SF_TCP_ALIGN,2
auto,2
SOCKERR_PORTZERO,2
indication,2
calculate,2
Added,2
here,2
keep,2
whatever,2
Sn_RX_RD),2
(uint8_t*)dhar,2
100and,2
PACK_COMPLETED,2
getSn_TOS(),2
disconnect,2
protect,2
Client,2
report,2
Loop,2
**************************************,2
note,2
setPMRU(),2
200,2
received_size,2
elements,2
\is,\,2
spi_wb,2
Else,2
avoiding,2
16Kbytes,2
n.\n,2
10us,2
device,2
100);,2
Parse,2
wizchip_spi_readbyte,2
Indicate,2
Inputs:,2
\0x91,\,2
if(*((uint32_t*)addr),2
order,2
whether,2
necessary,2
\i,\,2
RCEN,2
OCxRS,2
Kbytes,2
Unreachable,2
unsupported,2
5ms,2
SO_DESTPORT,2
Machine_load_currents[i],2
calls,2
cntype,2
\ratings,\,2
dependent,2
client</b>,2
re-initialized,2
ping,2
Retry,2
enter,2
MULTI,2
comment,2
temperature_bytes[1]);,2
V1.1.0,2
operates,2
(0x0030,2
slew,2
align,2
thus,2
Mathias,2
<b>access,2
SEND/SEND_MAC,2
Unused,2
ctlwizchip_type,2
erratum,2
Sn_IR_TIMEOUT,2
full,2
(uint8_t*)subr,2
(PERIPH_CLK,2
fail,2
reply,2
\words,\,2
SOCKERR_SOCKINIT,2
Although,2
if(,2
<td>@b,2
Load,2
test,2
(P[3:0],2
SEND_KEEP,2
\REQUEST,\,2
State,2
\API,\,2
dhcp.c,2
display,2
count(@ref,2
(i,2
setSn_DPORT(),2
nul,2
outgoing,2
packinfo[7],2
setSn_TTL(),2
\"\TCP\,2
incremented,2
duty,2
Static,2
<i>wizdata(pointer,2
struct,2
much,2
\on,\,2
(uint8_t)ir,2
Decides,2
i++),2
cwtype,2
html,2
First,2
///////////////////////////////,2
udp,2
writes,2
shared,2
softly,2
buffer.\n,2
1ms,2
(*bus_wb)(uint32_t,2
IMR,2
X,2
Support,2
\0xBB,\,2
never,2
6);,2
Jung,2
///////////////////////////,2
wiz_NetTimeout,2
reporting,2
\CurrentSensor_Read_RMS(i,\,2
\CLOSE,\,2
\configurations,\,2
closing,2
WIZCHIP.IF.BUS._read_byte,2
PRy,2
automatic,2
\SERVER"\\,2
&packinfo),2
don't,2
<td>PPPoE</td>,2
\_WIZCHIP_IO_MODE_SPI_VDM_,2
Assume,2
priority,2
sendto(),2
Compare,2
10),2
getINTLEVEL(),2
\ACK,\,2
member,2
pick,2
\printf("\Check\,2
SOCK_IO_BLOCK,2
RB1,2
requests,2
uint8_t[4],2
getSn_IMR(),2
getRTR(),2
non-zero,2
node,2
bits,2
accepting,2
Peripheral,2
header),2
establishing,2
ARPTO,2
(uint8_t*)phar,2
\client,\,2
0x0005;,2
Definition,2
Ethernet,2
independant,2
re-configure,2
connecting,2
W5100.h,2
addrsel,2
Because,2
exit,2
\wizchip_bus_readbyte,\,2
carriage,2
\AddrSel,\,2
Lan,2
addrBuf,2
(0x0019,2
SOCKERR_SOCKOPT,2
idle,2
Speed,2
SHOULD,2
parameter.\n,2
Sn_MR(P3:P0),2
setSn_TOS(),2
wiz_recv_data(),2
Start,2
\array,\,2
disabling,2
I2C2,2
AC,2
assing,2
setSn_TXBUF_SIZE(),2
PIC32MX,2
serverbefore,2
break;,2
Currents,2
wizdata,2
follows.\n,2
need,2
if(tmp,2
�Socket,2
\getPMAGIC(),\,2
Phase,2
*********************************************,2
consecutive,2
\addr),\,2
((float)10,2
ctlnetwork_type,2
own,2
\byte,\,2
Now,2
S/W,2
Multicasting\n,2
<2012/12/20>,2
reg_wizchip_xxx_cbfunc(),2
Try,2
REQEUST,2
&&,2
Filtering\n,2
Segment,2
7,2
_RCR_),2
\message,\,2
fixed,2
\nothing,\,2
thresholds,2
link,2
configruation,2
allocation,2
Intialize,2
50Hz,2
tests,2
SO_MSS,2
V1.1.1,2
Sn_MR_TCP),2
halt,2
wave,2
diagram,2
010,2
broadcast,2
RA1,2
Rx,2
\getSn_IR(),\,2
getSn_TTL(),2
netmode_type,2
defines,2
\bit,\,2
\temperature,\,2
stream,2
mode(R/W),2
16000),2
address\n,2
well,2
SO_DESTIP,2
block\n,2
(FRC),2
make,2
both,2
\not,\,2
\reset,\,2
\TCP,\,2
four,2
disconnect-request,2
Sn_IR(0),2
getUPORTR(),2
\exceeded,\,2
WIZCHIP_WRITE_BUF,2
unsigned,2
HAL,2
pins,2
<2013/11/18>,2
data.\n,2
mode(R),2
format,2
Calculate,2
setSn_TX_WR(),2
<td>\b,2
IOMAP,2
Clock,2
\TTL,\,2
designated,2
\Sn_TX_FSR,\,2
Software,2
//////////////////////,2
WHIZCHIP,2
\1,2,4,8,\,2
\addition,\,2
192;,2
1.1.1,2
shift,2
enumration,2
SYN/ACK,2
Implicit,2
(FIN,2
Register(@ref,2
difference,2
Wave,2
trigger,2
max_size,2
registers</b>,2
s,2
\NUM_OF_ADC_SAMPLES_FOR_IRMS,\,2
getPSID(),2
CLOSE,2
scan,2
168;,2
sock_io_mode,2
@cond,2
(getSn_TX_FSR(s),2
readings,2
100kHz,2
\setSn_IMR(),\,2
'1',2
alive,2
reduces,2
packets,2
packet(Destination,2
<2013/12/20>,2
\Sn_IR,\,2
/////////////////////////////////,2
restart,2
\Sn_SR,\,2
0xF1,2
cstype,2
debug,2
\size,\,2
setMR(),2
can't,2
Internet,2
Orange,2
DOXY_APPLY_CODE,2
unknown,2
operating,2
PACK_COMPLETED;,2
SOCKERR_IPINVALID,2
Main,2
Debugging,2
WIZCHIP.IF.BUS._write_byte,2
2KB,2
inside,2
\printf("\Temp\,2
SOCK_UDP,2
<2012/12/26>,2
AVERAGE,2
itself,2
SOCKERR_SOCKCLOSED,2
0.707,2
respond,2
<I>sotype</I>,2
60MHz,2
states,2
\printf("\Received\,2
connection-process,2
\printf("\>>>>>>>>>>>>>>>>>>\,2
figure,2
Closed,2
_WIZCHIP_IO_MODE_SPI_FDM_,2
\APIs,\,2
w5100s,2
accessed,2
LAN,2
\SSN_CURRENT_SENSOR_RATINGS[i],\,2
mismatched,2
etc..,2
setSn_KPALVTR(),2
Init,2
\valid,\,2
3);,2
mode</b>),2
peer's,2
See,2
total,2
\details,\,2
-@ref,2
\0,\,2
SO_KEEPALIVEAUTO,2
setRTR(),2
cbfunc,2
Sizes,2
\setSn_DIPR(),\,2
recv,2
32bit,2
256,2
\that,\,2
\SF_MULTI_ENABLE,\,2
WIZCHIP_READ_BUF,2
\SEND,\,2
last,2
initialize,2
store,2
Transformer,2
SW,2
\Otherwise,\,2
defgroup,2
HW,2
Sn_IR_TIMEOUT),2
<2019/10/08>,2
(uint8_t)mr,2
\W5100S,\,2
Config,2
(automatic),2
(uint8_t*)gar,2
SOCK_LISTEN,2
\W5500,\,2
sum,2
n-th,2
number\n,2
\getsockopt(sn,\,2
less,2
0-59,2
_RTR_),2
\Sn_RX_RSR,\,2
@image,2
apply,2
\mode(001,\,2
auto-increased,2
scalar,2
\pBuf,\,2
Move,2
dhcp,2
\status,\,2
(uint32_t,2
so..,2
everything,2
intr,2
1.0.2,2
len),2
\PACK_FIRST,\,2
accept(),2
fraction,2
getSn_DPORT(),2
\SF_ETHER_OWN,\,2
During,2
2019/10/08,2
program,2
functions</b>,2
\UDP,\,2
rate,2
(if,2
close(),2
enabled,2
Use,2
(uint8_t*)shar,2
invalid,2
Tick,2
address(R),2
modification,2
Setup,2
FIN/ACK,2
option\n,2
TMR,2
There,2
1.0.0,2
ARP-process.\n,2
sizes,2
mode),2
\MSS,\,2
\_RTR_,\,2
(uint8_t)imr,2
selected,2
value(@ref,2
5100S,2
\SIK_CONNECTED,\,1
led,1
filter,1
divisor,1
0xC000;,1
Inout,1
Frequency,1
\10/100,\,1
ADC_raw_samples[NO_OF_MACHINES][NUM_OF_ADC_SAMPLES_FOR_IRMS];,1
transmittable,1
single,1
Assign,1
\2,\,1
JTAG,1
\"\<Berkeley\,1
relative_humidity_bytes[1]);,1
FRAG(Fragment,1
Berkeley_SOCKET.jpg,1
(uint16_t)SOCKERR_TIMEOUT;,1
PHY_DUPLEX_FULL,1
Size(Sn_MSSR0),1
SEND_OK,1
requested,1
new_recv_buffer_val);,1
4MHz,1
\PACK_REMAINED,\,1
A20160426,1
porting,1
*****************************************************************************/,1
5s,1
accepted,1
Service(TOS),1
(PR2+1)*((float)(100-duty_cycle)/100);,1
sized,1
wizchip_spi_readburst(uint8_t*,1
mode(<b>Client,1
\bytes,\,1
sign,1
care,1
empty,1
DHCP_BOOTREQUEST,1
signifying,1
connect-accept(SYN/ACK,1
getSn_IMR(socket_number));,1
(PR3,1
\printf("\Humid\,1
\normal,\,1
optimized(removed),1
1.65,1
FLAG,1
message;,1
<td><b>send()</b></td>,1
*((volatile,1
buffer)</i>,1
dchp_state,1
2nd,1
pDHCPMSG,1
\printf("\----\,1
default_MAC[i]),1
save,1
getSn_TxMAX(sn),1
(uint16_t)dport,1
PHY_POWER_NORM,1
auto-negotiation,1
standard,1
wizchip_conf.h,1
DisablePPPoE,1
cs_sel,1
<td>Sn_MR_UDP,1
((WIZCHIP_READ(Sn_PORT(sn)),1
setSn_MR(),1
bytes',1
terminated,1
communicate,1
\connect,\,1
Size:,1
\setIR(),\,1
Disabled),1
few,1
Order,1
\printf("\Temperature:\,1
bus_rb,1
SF_IO_NONBLOCK,1
wizchip_cris_enter,1
modify,1
\check_MAC[i],\,1
WIZCHIP_IO_Functions_W5200,1
<b>Passive,1
(001)</td>,1
dimension,1
e),1
\recv_data[4],\,1
average,1
Size(MSS),1
bus_rb;,1
1sec,1
Examples,1
variables,1
Current-Output,1
\WIZCHIP_READ(WIZCHIP_OFFSET_INC(_RTR_,1)))\,1
SerialReceive(),1
<b>DISCON,1
routines,1
recoverting,1
MR_FARP,1
port),1
getSn_MR(),1
.CRIS._enter,1
0x0001;,1
PGEC2/PGED2),1
Legacy,1
immediately\n,1
===========================================================,1
Otherwise,1
under,1
1.0.1,1
SOCK_TIME_WAIT,1
(that,1
0x8000,1
0xFFFF(greater,1
open_UART2,1
Unmask,1
SOCK_LAST_ACK,1
(check,1
SEND.\n,1
Read/Write,1
TRISAbits.TRISA1,1
DHCP_HTYPE100MB,1
created,1
functional,1
ACKEN,1
\getSHAR(),\,1
Day,1
listen(),1
Exit,1
<td>SOCK_MACRAW,1
timeTicks,1
@b'sn',1
setsockopt,1
==================================================,1
Tests,1
comma,1
\received,\,1
close()->socket()->close()->socket()->,1
)\n,1
//////////////////////////////////////////////////,1
getSn_RX_RSR(),1
Vailid,1
\socket,\,1
\UIPR,\,1
PHY_SPEED_100,1
(0x0032,1
Validation,1
Number,1
below,1
CHECK_SOCKMODE(Sn_MR_TCP);,1
(uint16_t)intlevel,1
Test,1
WIZ5500_network_information.dns[3],1
1.0.3,1
ANSELBbits.ANSB0,1
secs,1
Sn_TXBUF,1
Core,1
DHCP_FLAGSBROADCAST,1
power;,1
tick,1
live(TTL),1
setIR(),1
(JTAG,1
\DISCON,\,1
reg_dhcp_cbfunc(),1
DHCP_REREQUEST_STATE),1
\config,\,1
either,1
\STATE_DHCP_DISCOVER\r\n"\);\,1
(frequency,1
PR3,1
negotiation,1
recvform,1
4bytes,1
\cases,\,1
setSn_IMR(),1
\len,\,1
SOCKBUSY,1
depends,1
Our,1
DHCP_HTYPE10MB,1
uint32,1
dedicated,1
setIMR(),1
0x0F),1
(sock_io_mode,1
relative_humidity_bytes[0],1
pmode,1
CLIENT</b>during,1
methods,1
bottom,1
\"\<WIZnet\,1
Of,1
\ADSL,\,1
\others,\,1
OC3CON,1
\Ack(TCP),\,1
Sn_IR(3),1
success.\n,1
10s,1
0x0006;,1
<td>SEND_OK</td>,1
sizeof(RIP_MSG),1
uint8_t*,1
equals,1
\getIR(),\,1
6bytes,1
getSn_RX_WR(sn),1
\getSn_TX_FSR(),\,1
frame),1
APPs,1
\setSn_MSSR(),\,1
Sn_IR[3],1
\printf("\Addresses\,1
\operate,\,1
alternate,1
wake,1
APP,1
dhcp_mode,1
PR,1
timeout(@ref,1
Protocol).\n,1
(uint8_t)sir,1
Pin-A2,1
data(UDP,1
overwrites,1
argument\n,1
'010').\n,1
|=,1
setPMAGIC(),1
interrupt.\n,1
REPLY,1
(0x001C,1
simply,1
some,1
while(p,1
Sn_CR_SEND_MAC,1
(S0_MR(P[3:0]),1
<td>UDP</td>,1
0',1
(0x0018,1
CN_GET_TIMEOUT,1
mulitcasting</b>,1
\n,\,1
disk,1
\CW_SET_INTRRUPT,\,1
getSn_RX_RSR(socket_number);,1
containing,1
\setSn_IR(),\,1
RELEASE,1
checking,1
<td></td>,1
mode.\n,1
writing):,1
restore,1
Sn_CR_RECV,1
\_WIZCHIP_IO_BASE_,1
\getSn_RX_RD(),\,1
getSn_KPALVTR(),1
net,1
needed,1
bus_wb,1
check_DHCP_state(),1
getSn_TXBUF_SIZE(),1
MR_WOL,1
SF_MULTI_ENABLE,1
transfered,1
completing,1
\5,\,1
Configre,1
Prescale,1
Monitor,1
wizchip_cs_select(),1
Like,1
Sn_MR_MIP6B,1
2;,1
\PHAR,\,1
their,1
replied,1
accepted.\n,1
completes,1
\sprintf(message_to_send,\,1
_WZICHIP_,1
n.\n\n,1
_DHCP_H_,1
SOCKERR_SOCKFLAG;,1
yet,1
\SF_BROAD_BLOCK,\,1
fill,1
\read_good,\,1
over;,1
_RCR_+1,1
0x000D;,1
handle,1
optional,1
\OPEN,\,1
Sn_MR_ALIGN,1
0x0800,1
1:256,1
PARSE,1
\default_MAC,\,1
micro,1
*/,1
addresses,1
backs,1
Sn_CR_CLOSE,1
consists,1
getSn_DHAR(),1
\setSn_TTL(),\,1
getSn_TX_FSR(),1
(0x0035,1
future,1
DHCP_IP_CHANGED,1
(check_MAC[i],1
conversion,1
(uint16_t)frag,1
original,1
established,1
SOCK_CLOSING,1
\setSIR(),\,1
Framed,1
CON,1
DHCP_HLENETHERNET,1
\wizchip_spi_readbyte,\,1
<td><b>Protocol[0]</b></td>,1
\Unreachable,\,1
\setSn_RXBUF_SIZE(),\,1
address(,1
fails,1
Outputs:,1
SOCK_ANY_PORT_NUM,1
out,1
DHCP_FAILED,1
IPC1<4:2>,1
default_MAC[],1
number_of_received_messages,1
reference,1
disconnection,1
Implements,1
CW_GET_PHYSTATUS,1
0.\n,1
\%.2f"\,\,1
<td>SOCK_INIT,1
ok,1
\WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_WR(sn),1)))\,1
\Timer5,\,1
taddr,1
\setSn_CR(),\,1
problem,1
\cleared,\,1
abnormal,1
getSn_RX_WR(),1
page-131,1
processed.\n,1
\duplex,\,1
PACK_FIRST,1
\LISTEN,\,1
\\_WIZCHIP_IO_MODE_BUS_,\,1
(Auto-keepalive-process),1
wizchip_cs_deselect(void),1
Sn_TSR(N),1
AddrSel);,1
\host,\,1
ANSELBbits.ANSB1,1
Comparison,1
\initialization,\,1
Display,1
Transfer,1
Sn_IR_DISCON,1
second;,1
11,1
\Sn_TX_FSR),\,1
wizchip_cris_exit(void),1
(num_chars),1
SOCK_PPPOE,1
PHY_CONFBY_SW,1
\&temperature_bytes[1],\,1
ctlsocket(),1
DEFINION,1
IR_PPPoE,1
sock_pack_info[_WIZCHIP_SOCK_NUM_],1
Previous,1
AddrSel));,1
Passive,1
Divide,1
sendto():,1
\Wiz-MISO,\,1
getIR(),1
watchdog,1
\1:minutes,\,1
(uint8_t)simr,1
Broadcasting,1
CS_SET_INTMASK,1
/CONNECT,1
W5500:@ref,1
Failed,1
_TEMPSENSOR_DEBUG_,1
\Sn_TX_WR,\,1
array/pointer,1
\_WIZCHIP_IO_MODE_,\,1
Multiplier,1
\(Manual/Auto,\,1
DHCP_STOPPED,1
serial,1
\getSn_IMR(),\,1
bined,1
<td><b>recvfrom()</b></td>,1
MCU,1
Threshold,1
setPHYCFGR(),1
\setSn_FRAG(),\,1
txsize,1
.CS._deselect,1
_WIZCHIP_IO_MODE_BUS,1
added,1
RC,1
};,1
\getRTR(),\,1
increases,1
(Communicate,1
\{0xAA,\,1
determine,1
default_MAC[i]);,1
check_MAC[6];,1
break,1
001,1
ping-request,1
replaced,1
ARP-process,1
(uint8_t)ttl,1
stores,1
Service,1
1024,1
can�t,1
oscillator,1
remained,1
CHECK_SOCKMODE(Sn_MR_UDP);,1
memory(R/W),1
MR_PB,1
IR_MP,1
Socket.\n,1
Socekt,1
.if_mode,1
compares,1
\getSn_DHAR(),\,1
\successful,\,1
\setSIMR(),\,1
M1,1
M:20131104,1
recv_data[4];,1
\WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_MSSR(sn),1)))\,1
now,1
(0x0034,1
OP,1
R/W,1
\Sn_IMR,\,1
((WIZCHIP_READ(INTLEVEL),1
CS_GET_INTMASK,1
another,1
setSn_RXBUF_SIZE(),1
getSHAR(),1
processes,1
(uint8_t)ptimer,1
RST,1
\0x00,\,1
1\n,1
DHCPDECLINE,1
\Speed,\,1
\successfully),\,1
unreferenced,1
SOCK_ESTALBLISHED,1
extract,1
initiating,1
(WIZCHIP_RXBUF_BLOCK(sn),1
CONNECT/SEND,1
(PPS),1
bus_wb;,1
SOCK_UDP),1
\WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_PORT(sn),1)))\,1
Increase,1
1-12,1
wb,1
\PTIMER,\,1
\getSn_TTL(),\,1
_NETWORK_DEBUG_,1
Sn_RX_WR)and,1
BAD:,1
NETINFO_STATIC;,1
EEPROM_Clear();,1
'\r',1
\SIR,\,1
W5000,1
wizchip_bus_readdata(),1
\check_MAC,\,1
bobh,1
\off,\,1
on.\n,1
Raw,1
server</b>configured,1
LOOPBACK,1
Keep,1
TO,1
\WIZCHIP_WRITE,\,1
MODE,1
wizchip_bus_readbyte;,1
times,1
\Buffer,\,1
MOSI-2,1
PHY_MODE_MANUAL,1
let,1
recv_data[2];,1
Normal_Operation_LED_INDICATE();,1
command),1
getSn_IR(),1
(*bus_rb)(uint32_t,1
********************************************************,1
mode(@ref,1
group.\n,1
getRCR(),1
binding,1
WIZ5500_network_information.sn[1],1
control</b>,1
deselected,1
-------------------------------,1
System,1
\Successfully\n"\);\,1
\broadcast,\,1
(0x0037,1
AN5,1
0x04,1
S0_MR(P[3:0],1
Sn_IR_SENDOK,1
sizeof(RIP_MSG.opt),1
OC4CONSET,1
recall,1
checks,1
bool,1
Unlike,1
_W5500_H_,1
compiler,1
DHCP_BOOTREPLY,1
Sn_MR_UCASTB,1
I/F,1
\Sn_CR,\,1
--------------------------------------------,1
(Manual-keep-alive-process),1
\getSn_IR(socket_number),\,1
\Message\r\n"\);\,1
passive(server),1
Pin-A2:,1
Bus,1
M20150410,1
\setSUBR(),\,1
wizchip,1
initialized\n,1
(getSn_RXBUF_SIZE(sn),1
Configure,1
(0x0014,1
\clientmode,\,1
--------------------------,1
RPA3R,1
networking\n,1
declared,1
Socket.),1
M2,1
fucntion,1
XNS,1
socket.\n,1
acknowledge,1
(uint8_t*)uipr,1
continue;,1
@\ref,1
TRISBbits.TRISB0,1
setPHAR(),1
taddr[4];,1
lease,1
method,1
server</b>or,1
(uint16_t)port,1
\c,1
<td>MP</td>,1
WIZ5500_network_information.dns[0],1
neg,1
argument,1
5:year],1
\TOS,\,1
Variables,1
ADC_SAMPLES_PER_INT_X,1
setSHAR(),1
Delay(),1
ReceiveD,1
repalce,1
machine's,1
(uint8_t)cr,1
\setPHYCFGR(),\,1
<td><b>API</b></td>,1
\Sn_RX_WR),\,1
(FIN/ACK,1
64,1
Sn_MR_MC,1
<td>IM_IR5</td>,1
Interface,1
Fatal,1
Byte,1
Defines,1
<=,1
reached,1
rx,1
uint8_t*)((ptrdiff_t)AddrSel)),1
T3CONSET,1
SUBR,1
Half-Duplex,1
(0x002F,1
uint8*,1
declaration:,1
TODO,1
\SF_IGMP_VER2,\,1
Multicating</b>,1
\getSn_TX_WR(),\,1
override,1
Sn_MR_ND,1
\_WIZCHIP_IO_MODE_SPI_FDM_,1
\wizchip_cs_deselect,\,1
<b>TIMEOUT,1
\wizchip_cs_select,\,1
6;,1
discards,1
\SF_MULTI_BLOCK,\,1
Sn_MR_MMB,1
(AN2),1
DHCP_HOPS,1
CS_GET_MAXRXBUF,1
\printf("\Machine-%d:\,1
\getSIPR(),\,1
<td>TIMEOUT</td>,1
optimization,1
<td>UNREACH</td>,1
SYN,1
wizchip_cs_deselect,1
\Sn_PORT,\,1
\this_machine_threshold,\,1
SOCK_IO_NONBLOCK,1
\getSIMR(),\,1
APR-process,1
\currents,\,1
Masks,1
management,1
least,1
\getSn_KPALVTR(),\,1
Functions,1
(0x22)</td>,1
SO_TTL,1
Enter,1
\one,\,1
001.\n,1
released.\n,1
temperature_bytes[1],1
Fragment,1
(*_read_byte),1
\SOCKET,\,1
IDs,1
server</b>mode,1
default_ip_update),1
\returned,\,1
_WIZCHIP_IO_MODE_IIC_,1
duty_cycle--),1
Attach,1
skip,1
client</b>.\n,1
setSUBR(),1
connect(),1
((WIZCHIP_READ(Sn_RX_WR(sn)),1
\setSn_IR(socket_number,\,1
\Sn_DHAR,\,1
#include,1
Node,1
getSn_DPORT(sn),1
Power,1
((WIZCHIP_READ(Sn_FRAG(sn)),1
CN_SET_TIMEOUT,1
WIZ5500_network_information.ip[1],1
\printf("\Cleared\,1
password,1
\SEND_MAC,\,1
<td><b>Protocol[3]</b></td>,1
<td><b>WIZnet</b></td>,1
SOCK_CLOSED.\n,1
Bit,1
.IF.SPI._read_byte,1
little,1
.CS._select,1
recvsize;,1
echo,1
\getSn_RXBUF_SIZE(),\,1
\but,\,1
increase,1
\getMR(),\,1
************************************************************************,1
MISO,1
Humidity:,1
recv_data[3]);,1
getSn_FRAD(),1
\%d\r\n"\,\,1
*******************************************************,1
peer\n,1
MSS,1
socket.h,1
MR_RST,1
aligned,1
CS_GET_INTERRUPT,1
[FPB,1
w5500.c,1
PR2,1
\0x1F,\,1
\processed,\,1
(0x0031,1
mode(Client,1
0;};,1
bit.\n,1
remove,1
getPSID(void);,1
configuring,1
\WIZCHIP_READ_BUF(UIPR,uipr,6)\,1
comments,1
Critical,1
wb)),1
\sequence,\,1
wizchip_spi_writeburst(uint8_t*,1
extern,1
didnot,1
SOCKERR_SOCKSTATUS;,1
inline,1
Parameter,1
higher-level,1
(uint16_t)txwr,1
settings,1
\SUBR,\,1
Positions,1
respective,1
<td>Protocol[1]</td>,1
Off,1
masks,1
discard,1
\setPSID(),\,1
_WIZCHIP_CONF_H_,1
berkeley,1
.CRIS._exit,1
\established,\,1
_WIZCHIP_IO_MODE_SPI_5500_,1
wizchip_cs_select,1
</b>\n,1
\SF_TCP_NODELAY,\,1
1472),1
setSn_RX_RD(),1
sure,1
((WIZCHIP_READ(Sn_MSSR(sn)),1
half,1
Infomation,1
\getSn_MR(),\,1
cs_desel,1
Controller,1
pack_len;,1
\network,\,1
cris_ex,1
mulitcasting,1
DHCP_FLAGSUNICAST,1
Prescaler,1
RIP_MSG.opt,1
SF_UNI_BLOCK,1
integer,1
transferred,1
occur,1
V1.0.3,1
\4:month,\,1
<td><b>bind()</b></td>,1
\getPMRU(),\,1
critial,1
(Ethernet,1
(uint16_t)rxrd,1
controls,1
proper,1
////////////////////////////////////////////////////,1
\getSn_FRAG(),\,1
((volatile,1
Inforamtion,1
wizchip_spi_writebyte(uint8_t,1
\PBCLK,\,1
printing,1
<td>Sn_MR_CLOSE,1
OK,1
TOS(Type,1
((WIZCHIP_READ(UPORTR),1
\socket(s,Sn_MR_UDP,0x3000,0);\,1
(0x001D,1
6),1
<td>Protocol[0]</td>,1
NO_OF_MACHINES;,1
CS_SET_IOMODE,1
MISO-2,1
ARP-request,1
recv(),1
\Sn_MR,\,1
(SSN_CURRENT_SENSOR_RATINGS[i],1
info,1
(uint8_t)phycfgr,1
socket.c,1
printf,1
tx,1
dhcp_tick_1s,1
head[5];,1
WIZNet5500,1
WIZ5500_network_information.sn[2],1
((WIZCHIP_READ(_RTR_),1
<td>DISCON</td>,1
TCP/IP,1
8;,1
wizwiki,1
\WIZCHIP,\,1
WIZ5500_network_information.gw[0],1
\INTLEVEL,\,1
through,1
SO_KEEPALIVESEND,1
getSIMR(),1
100),1
completely,1
TYPE,1
Comm,1
meaning,1
.IF.BUS._write_byte,1
retransmits,1
<td>O<br>close(),1
(*_write_byte),1
\getGAR(),\,1
\configuration,\,1
nodelayed,1
#else,1
information</b>,1
Sn_CR_SEND,1
\[0:hours,\,1
\Sn_TTL,\,1
Oscillator,1
Sn_IR(3)='1'),1
Wiz-RST,1
unint32,1
.IF.BUS._read_byte,1
\STATE_DHCP_REREQUEST\r\n"\);\,1
AddrSel),1
wait_1s();,1
<td>RECV</td>,1
Processig,1
\getUIPR(),\,1
PHY_DUPLEX_OFF,1
Configures,1
\condition,\,1
\9,\,1
they,1
100.\n,1
dividing,1
0x00,1
240,1
---------------------------------,1
wizchip_bus_writebyte(uint32_t,1
clear_status,1
\getRCR(),\,1
\getPHYCFGR(),\,1
Chip,1
TCP.\n,1
\WIZCHIP_READ(WIZCHIP_OFFSET_INC(UPORTR,1)))\,1
\PSID,\,1
(uint8_t)kpalvt,1
getUIPR(uipr),1
////////////////////////////////////,1
\Complete\n"\);\,1
nonblock,1
Sn_IR(TIMEOUT),1
temperature_bytes[0],1
release,1
CURRENT_OUTPUT_CURRENT_SENSOR_SCALAR);,1
(0x0036,1
\PHY(Link,Speed,Half/Full/Auto),\,1
percentages,1
blink,1
SO_STATUS,1
_SOCKET_H_,1
PHY_MODE_AUTONEGO,1
U2,1
STATE_DHCP_LEASED,1
w5500.h,1
\PHYCFGR,\,1
\IMR,\,1
example,1
*)((ptrdiff_t),1
communicating,1
(INTn),1
\SYN,\,1
ETC,1
\7,\,1
strings,1
\full-closing,\,1
time-in-state,1
node's,1
\setPTIMER(),\,1
SO_REMAINED,1
Divider,1
Settig,1
\_WIZCHIP_ID_,\,1
my,1
Sn_IR(RECV),1
Timer5,1
4byte,1
0xD0,1
200ms(100us,1
session,1
sn),1
etc.,1
OPMDC,1
similar,1
default_ip_assign),1
((tmp,1
appended,1
WIZCHIP_CRITICAL_EXIT(),1
setSIMR(),1
wizchip_bus_writedata(),1
\Servermode,\,1
\Sn_TX_RD,\,1
Temporary,1
Alive,1
negative,1
WIZ5500_network_information.gw[1],1
(Fragment,1
timestamps,1
TOS,1
((WIZCHIP_READ(Sn_TX_WR(sn)),1
2000),1
GetSn_TX_WR(),1
typed,1
Auto-keep-alive-process,1
//////////////////////////////////////////////////////,1
begin,1
getPHAR(),1
proceeding,1
\Sn_RXBUF_SIZE,\,1
\command,\,1
wb;,1
0x06),1
getSn_RX_RD(),1
\WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_RD(sn),1)))\,1
WIZCHIP_CRITICAL_EXIT,1
idp,1
\getINTLEVEL(),\,1
rxsize,1
NON-TCP,1
WIZ5500_network_information.ip[2],1
DHCP_XID,1
Printout,1
_CURRENTSENSOR_DEBUG_,1
I2C,1
(uint8_t)rxbufsize,1
Note,1
changing,1
(PWM,1
getSn_FRAG(sn),1
sleep,1
counts,1
\Sn_MR_UDP,\,1
*@par,1
there're,1
<td>Protocol[2]</td>,1
messaging,1
macros,1
\connection,\,1
Protocol,1
setSn_CR(),1
SSN_CONFIG[3*i+3],1
<td>S0_MR_MACRAW,1
Ready,1
(ptr,1
\2:seconds,\,1
<td>UCASTB/MIP6B</td>,1
(b>Active,1
CHECHK,1
\establishment,\,1
\Sn_DIPR,\,1
setSn_DIPR(),1
x07D0,1
\STATE_DHCP_REQUEST\r\n"\);\,1
<td>TCP</td>,1
256),1
WIZ5500_network_information.sn[0],1
0x5F,1
PHY_POWER_DOWN,1
overhead,1
\getPHAR(),\,1
.id,1
input/output,1
IK_DEST_UNREACH,1
(P[3:0])</td>,1
setup_printf(19200);,1
(1);,1
check);,1
(Destination,1
\memory,\,1
read/write,1
Sn_CR_DISCON,1
\(CONNECT,\,1
asserts,1
\termination,\,1
\attached,\,1
<td>IM_IR4</td>,1
Sn_RX_FIFOR,1
DHPC,1
PHYSTATUS,1
closes,1
(SYN/ACK,1
DHCP_IP_ASSIGN,1
value.\n,1
Stand,1
notifying,1
0x08,1
ordered,1
010.\n,1
(cf,1
external,1
get_config,1
\Therefore,\,1
Recv,1
WIZ5500_network_information.gw[3],1
OPTION,1
sense,1
interesting,1
ICE/ICD,1
occures,1
Ratings,1
\setSn_DHAR(),\,1
assingment,1
Replace,1
\setSn_TOS(),\,1
\PMAGIC,\,1
\setSn_DPORT(),\,1
\Sn_RX_RD,\,1
manually,1
ip_assign,1
W5200:@ref,1
\wizchip_cris_exit,\,1
Sn_CR_LISTEN,1
getSn_SR(),1
CW_SET,1
\phy,\,1
true;,1
EnablePPPoE,1
activity,1
this_machine_prev_status);,1
MUXA,1
\relative_humidity,\,1
&recv_data[2];,1
<td>PB</td>,1
NULL,1
connectionless,1
this_clock:,1
SO_FLAG,1
getPHYCFGR(),1
forum,1
SIK_ALL,1
Session,1
((ptr,1
Sn_SR</td>,1
wizchip_conf.c,1
(0x0038,1
recvfrom,1
<td><b>Protocol[2]</b></td>,1
CONTROL,1
mode(<b>Server,1
wiz_send_data(),1
decide,1
relative_humidity_bytes[1],1
Mac,1
\zero,\,1
Applied,1
self-contained,1
\Sn_MSSR,\,1
perform,1
M4,1
this_machine_maxload);,1
WIZ5500_network_information.ip[0],1
(default,1
3.3,1
detection,1
\100,\,1
Has,1
<td>Closed</td>,1
Header),1
setup_EEPROM();,1
Sn_RXBUF,1
getSn_CR(),1
END,1
cris_en,1
keeps,1
integarating,1
finished,1
\SHAR,\,1
Host,1
getSn_PORT(sn),1
long,1
Assert,1
\6,\,1
only),1
PHY_DUPLEX_HALF,1
time-period,1
ip_conflict,1
TIMEOUT,1
Input,1
\getSn_CR(),\,1
(AN4),1
<b>SEND_OK,1
Sn_TX_RD),1
supports,1
\Sn_TXBUF_SIZE,\,1
PHYSTATUS.OPMD,1
\&relative_humidity_bytes[0],\,1
M20156501,1
NETWORK,1
MTU(Maximum,1
AM2320,1
(010)</td>,1
(Join/Leave/Report),1
T2CONSET,1
marco,1
previously,1
(clear_status,1
CW_SET_INTRMASK,1
setSn_DHAR(),1
\_WIZCHIP_IO_MODE_BUS_,1
Manual-keep-alive-process,1
arrays,1
threshold,1
;,1
Handler,1
SEND/SEND,1
Open,1
Offered,1
timer-1,1
result,1
channel;,1
getMR(),1
could,1
reduction,1
Regardless,1
\WIZCHIP_READ(WIZCHIP_OFFSET_INC(PMRU,1)))\,1
IPC2<4:2>,1
\getSn_TXBUF_SIZE(),\,1
<td>SOCK_UDP,1
close</b>.\n,1
Normally,1
)(R/W),1
EEPROM_checker_code(),1
TRISBbits.TRISB1,1
cannot,1
PHY_SPEED_10,1
Driver,1
Callback,1
Integrate,1
\relative_humidity_bytes[0],\,1
\Data,\,1
recv_data[5];,1
SOCK_IO_NONBLOCK</td></tr>,1
getSn_RX_RD(sn),1
IM_IR5,1
'010',1
Accurate,1
ssn,1
((WIZCHIP_READ(PSID),1
DHCP_IP_LEASED,1
startup,1
Dummy,1
Gateway^2,1
converts,1
getSUBR(),1
members,1
Sn_RX_RD).\n,1
sweep,1
\Sn_TX_WR),\,1
</td><td>@ref,1
(uint8_t)rcr,1
((WIZCHIP_READ(Sn_RX_RD(sn)),1
0~,1
getPMAGIC(),1
transferred.\n,1
Character,1
\printf("\This\,1
relative_humidity);,1
Sn_MR.\n,1
\SOCK_SYNSENT,\,1
CS_GET_MAXTXBUF,1
certain,1
task,1
Step-1:,1
bind(),1
\setSn_RX_RD(),\,1
SSN-Seconds,1
<td>Sn_MR_TCP,1
\setSHAR(),\,1
PHY_LINK_ON,1
hops,1
ANSELAbits.ANSA0,1
RTR,1
Fast,1
\WIZCHIP_READ(WIZCHIP_OFFSET_INC(INTLEVEL,1)))\,1
<b>Protocol</b>,1
crtical,1
sustaining,1
\getSn_TOS(),\,1
\Sn_MR_TCP,\,1
reg_wizchip_bus_cbfunc(uint8_t,1
currents,1
getSn_RxMAX(sn),1
\CW_GET_INTERRUPT,\,1
3:,1
infinite,1
&relative_humidity_bytes[1]);,1
operations,1
<td>MULTI/MFEN</td>,1
*((uint8_t*)arg),1
setSIR(),1
_EEPROM_DEBUG_,1
(WIZCHIP_TXBUF_BLOCK(sn),1
masked,1
wb);,1
base,1
identifier,1
CW_GET_PHYCONF,1
recv_data[3];,1
Save,1
particular,1
\3,\,1
<td><b>closesocket()</b></td>,1
(100)</td>,1
0x00008000,1
\getPTIMER(),\,1
do:,1
(uint16_t)rtr,1
////////////////////////////,1
lost,1
\Sn_TOS,\,1
ANSELAbits.ANSA1,1
switch,1
\is...\n"\);\,1
20140626,1
getVERSIONR(),1
connection\n,1
Shared,1
Pin-A3,1
IM_IR7,1
<td>CON</td>,1
Dynamic,1
if(!WIZCHIP.IF.SPI._read_burst,1
wizchip_cris_exit),1
if(dchp_state,1
calculated,1
table,1
\IR,\,1
\getSIR(),\,1
(0x0016,1
reducing,1
(0x001A,1
getSn_MSSR(),1
updates,1
Pbclk,1
were,1
IM_IR6,1
\request,\,1
\WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_DPORT(sn),1)))\,1
While,1
_WIZCHIP_IO_MODE_SDIO_,1
Think01,1
10ms,1
\defined,\,1
done,1
data;,1
IM_IR4,1
A2015051,1
check++;,1
\1,\,1
Sn_MR_BCASTB,1
ensure,1
SSN_CONFIG[3*i+1],1
\mac,\,1
succcess,1
\CONNECT,\,1
\ClauBen,\,1
1us,1
U2RX,1
Sn_IR_CON,1
\getSn_MSSR(),\,1
\read_value,\,1
(xFFFFFFFFFFFF,1
WIZ5500_network_information.ip[3],1
CS_CLR_INTERRUPT,1
to/from,1
(before,1
(uint16_t)mss,1
M3,1
<td><b>connect()</b></td>,1
(For,1
MTU),1
Active,1
((getSn_MR(s)&,1
Set/Get,1
CS_GET_IOMODE,1
WIZ5500_network_information.sn[3],1
disconnect()</td>,1
We,1
WIZ5500_network_information.dhcp,1
W500,1
(uint16_t)psid,1
PUP,1
non-framed,1
others,1
IR_CONFLICT,1
soon,1
{return,1
heartbeat,1
\Basic_IO_function,\,1
ALIVE(KA)packet,1
assigning,1
\ICMP,\,1
}BUS;,1
timeout).\n,1
\setSn_MR(),\,1
though,1
loop),1
INFORM,1
<td><b>sendto()</b></td>,1
hlen,1
internally,1
(Sn_IR(3),1
\occur,\,1
<td>IM_IR7</td>,1
GAR,1
SO_SENDBUF,1
getSIPR(taddr);,1
Value)],1
PROTOCOL,1
(deprecated),1
\getIMR(),\,1
Abnormal,1
again,1
Disconnected,1
resets,1
clientafter,1
Append,1
getSn_TX_WR(sn),1
WIZ5500_network_information.dns[1],1
A20140501,1
decleation,1
\SOCK_LISTEN,\,1
endian,1
SOCKERR_TIMEOUT;,1
somewhere,1
<td>WOL</td>,1
.IF.SPI._write_byte,1
New,1
Wiz-CS,1
blocking,1
Sn_DPORT(destination,1
larger,1
wizchip_bus_readbyte(uint32_t,1
ARP-process(Address,1
\setGAR(),\,1
\>>>>>>>>>>>>>>>>>>>\n"\);\,1
shouldn't,1
_UART_DEBUG_,1
!bus_wb),1
WIZCHIP_CRITICAL_ENTER,1
Secondary,1
\setIMR(),\,1
\SPI,\,1
todo,1
ARP-response,1
vaule,1
\sendto(s,destip,1,destip,0x3000);\,1
simple,1
\getSn_DIPR(),\,1
DHCP_SECS,1
packet.\n,1
\just-closing,\,1
<td><b>Berkeley</b></td>,1
temporarily,1
\WIZCHIP_READ,\,1
forces,1
cases.\n,1
transaction,1
(uint8_t)txbufsize,1
(Sn_IR_TIMEOUT),1
PHY_CONFBY_HW,1
\setRCR(),\,1
advices,1
30MHz,1
Channel,1
Ack(TCP),1
any..,1
mode(Server,1
Don't,1
\wizchip_cris_enter(),\,1
DHCP_RUNNING,1
YOUR,1
Construct,1
suitable,1
send(),1
Pin-B13:,1
link;,1
getSn_MSSR(sn),1
PWM_Sweep(),1
recommended,1
<td>FARP</td>,1
(0x02)</td>,1
(PR2,1
Reply,1
final,1
(PR3+1)*((float)(100-duty_cycle)/100);,1
SSN_CONFIG[3*i+2],1
\{0,};\,1
\5500,\,1
if(sock_remained_size[sn],1
autosample,1
DO,1
(outside,1
\DICON,\,1
wizchip_spi_readbyte(void),1
\getSn_PORT(),\,1
Full-Duplex,1
WIZnet_SOCKET.jpg,1
within,1
setPTIMER(),1
Buffer.\n,1
Manually,1
8-bit,1
sock_remaiend_size[sn],1
instance,1
MAC_RAW,1
\\_WIZCHIP_IO_MODE_BUS_DIR_,\,1
SO_REMAINSIZE,1
address(R/W)\n,1
give,1
marker,1
(AN1),1
\SOCK_INIT,\,1
LISTEN,1
\this_machine_rating,\,1
\sendto(),\,1
Occupy,1
010.\m,1
((WIZCHIP_READ(PMRU),1
Pin,1
~460ms,1
A201505,1
converting,1
Activity,1
Values,1
<td><b>listen()</b></td>,1
Will,1
SOCKERR_ARG,1
getIMR(),1
DHCP_stop(),1
****************************************************************************/,1
Configuration,1
<td>ND/MC/MMB</td>,1
0xBB};,1
increasing,1
push,1
peripherals/devices,1
25ms,1
\GAR,\,1
SOCK_DHCP,1
modes,1
((WIZCHIP_READ(Sn_TX_RD(sn)),1
stuff..,1
if((flag,1
\&temperature_bytes[0],\,1
wizchip_bus_readbyte,1
\number,\,1
serious,1
while(1);,1
Extra,1
fit,1
&relative_humidity);,1
\peer,\,1
\printf("\Write\,1
\WIZCHIP_READ(WIZCHIP_OFFSET_INC(PSID,1)))\,1
wizchip_cs_select(void),1
Single,1
\getsockopt(),\,1
\_WIZCHIP_IO_MODE_,1
M20150515,1
proceed,1
VOLTAGE_OUTPUT_CURRENT_SENSOR_SCALAR);,1
\FLAG,\,1
0xFFFFFFFF,1
\Sn_RX_RSR),\,1
<td><b>accept()</b></td>,1
\getSn_SR(),\,1
Clears,1
\WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RD(sn),1)))\,1
TTL(Time,1
Optimize,1
setRCR(),1
\setPHAR(),\,1
UNOFFICIAL,1
wizchip_bus_writebyte;,1
\5200,\,1
//////////,1
Retransmission,1
disconnect-request(FIN,1
IND,1
\1-(28,29,30,31)\,1
\getSn_TX_RD(),\,1
0x0400,1
<td>Protocol[3]</td>,1
serverand,1
WIZ5500_network_information.gw[2],1
(0x0017,1
\SDIO,\,1
<b>CON,1
(uint8_t)pmagic,1
WIZ5500,1
finish,1
0-99,1
MR_PPPOE,1
\WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_WR(sn),1)))\,1
UDP_FORCE_ARP,1
\EEPROM_Read_Array(EEPROM_BLOCK_0,\,1
\"\5:%d;%d;1_%d_%d_%d_%d_%d$2_%d_%d_%d_%d_%d$3_%d_%d_%d_%d_%d$4_%d_%d_%d_%d_%d;%d;0!\0"\,\,1
\_WIZCHIP_IO_MODE_BUS_INDIR_),1
<td>RST</td>,1
\getPSID(),\,1
smallest,1
<td><b>Protocol[1]</b></td>,1
<2013/11/04>,1
numbers,1
Unit),1
Function,1
TRISAbits.TRISA0,1
volatile,1
SOCKERR_SOCKFLAG,1
\wizchip_cris_enter,\,1
RFC1533),1
U2TX,1
getSn_RXBUF_SIZE(),1
\recv_data[5],\,1
SerialTransmit(),1
fractional,1
SOCK_SYNRECV,1
contents,1
payload,1
16K,1
Sn_MR),1
!WIZCHIP.IF.SPI._write_burst),1
Invaild,1
<td>CONFLICT</td>,1
Free,1
follow,1
Any,1
getSn_IR(sn)),1
Live,1
RPA2R,1
SOCK_ESTABLISHED.\n,1
there's,1
RECEIVE.\n,1
Sn_CR_CONNECT,1
\getSn_RX_RSR(),\,1
<td>MACRAW</td>,1
\unique,\,1
Multicasting</b>,1
construct,1
write_good;,1
deciphered,1
8MHz,1
\"\20131104"\\,1
Sends,1
Pin-B4:,1
Zero,1
(when,1
\PHY,\,1
AN4,1
\Sn_KPALVTR,\,1
setPSID(),1
4),1
(getSn_TXBUF_SIZE(sn),1
divide,1
special,1
host.\n,1
<td>IM_IR6</td>,1
Resolution,1
((WIZCHIP_READ(Sn_DPORT(sn)),1
\setSn_PORT(),\,1
\restart,\,1
\complier,\,1
SOCK_FIN_WAIT,1
setGAR(),1
tmp,1
Voltage-Output,1
(uint16_t)pmru,1
smaller,1
BASIC,1
ip_update,1
<td>BCASTB</td>,1
Target,1
0x80008065),1
Sn_MR_CLOSE,1
SOCK_SYNSENT,1
Change,1
Meaning</td>,1
x00\n\n,1
getSn_TX_RD(sn),1
reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t,1
synchronization,1
(Refer,1
(AN3),1
\recv_data[2],\,1
ClauBen,1
<b>socket,1
TTL,1
<b>RECV,1
\OK\n"\);\,1
\SF_IPv6_BLOCK,\,1
\multicasting,\,1
opening,1
\Machine_status[i],\,1
(uint8_t)tos,1
(0x13)</td>,1
CW_GET_INTRMASK,1
wb));,1
Netinfo,1
<td><b>recv()</b></td>,1
Warning,1
SERVER</b>processed,1
half-closing,1
current_uptime_in_seconds);,1
SOCKET_LISTEN,1
tmp;,1
getSIPR(),1
\day,\,1
parameter\n,1
DEFINE,1
getPTIMER(),1
variable)</i>,1
insert,1
NUMBER,1
Changed,1
if(!bus_rb,1
WIZCHIP_CRITICAL_ENTER(),1
TEST,1
Half/Full),1
SOCK_CLOSE_WAIT,1
\%.2f,\,1
\getSUBR(),\,1
12,1
\EEPROM_Write_Array(EEPROM_BLOCK_0,\,1
execute,1
(Disabled),1
\WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_FRAG(sn),1)))\,1
\5100,\,1
(000)</td>,1
0x01,1
ever,1
wizchip_cris_enter(void),1
issues,1
0x01;,1
\Static,\,1
pointed,1
functions(@ref,1
note:,1
setSn_FRAG(),1
setSn_PORT(),1
re-define,1
Make,1
<b>common,1
WIZ5500_network_information.dns[2],1
getSn_PORT(),1
available,1
maintaining,1
(sock_remained_size[sn],1
successful.\n,1
\stack,\,1
*\ref,1
Identification,1
acts,1
\information,\,1
\sample_Temperature_Humidity(&temperature,\,1
\ordered,\,1
0-23,1
2\n,1
memory(R),1
creating,1
OC3CONSET,1
SO_RECVBUF,1
getGAR(),1
Also,1
up,1
interrupted,1
Hybrid,1
MSB,1
high-level,1
Infinite,1
\"\OFF"\\,1
1byte,1
number_of_received_messages;,1
common,1
_SMARTSENSE_DEBUG_,1
OC4CON,1
taddr;,1
�KEEP,1
(0x0033,1
<td>socket()</td>,1
\printf("\%d\,1
\8,\,1
group\n,1
Sn_CR_SEND_KEEP,1
\getSn_DPORT(),\,1
required,1
Sn_IR_RECV,1
Off(0)/Idle(1)/On(2),1
getSIR(),1
command.\n,1
Thank,1
close</b>or,1
PHYCONF,1
print,1
16-bit,1
<I>flag</I>,1
regardless,1
sender,1
